{"ast":null,"code":"export default function FormValidation(e, formInput, error) {\n  const formState = formInput;\n  const errorState = error;\n\n  if (e.target.name === 'username') {\n    formState.username = e.target.value;\n    const regexp = /^\\S*$/;\n\n    if (formState.username.length > 0 && !regexp.test(formState.username)) {\n      errorState.username = 'No whitespace allowed';\n    } else if (formState.username.length > 0 && formState.username.length < 5) {\n      errorState.username = 'Username must be 5 character';\n    } else {\n      errorState.username = '';\n    }\n  }\n\n  if (e.target.name === 'password') {\n    formState.password = e.target.value;\n\n    if (formState.password.length < 8 && formState.password.length > 0) {\n      errorState.password = 'Password must be of 8 characters';\n    } else {\n      errorState.password = '';\n    }\n  }\n\n  if (e.target.name === 'email') {\n    formState.email = e.target.value;\n    const validRegex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n\n    if (!validRegex.test(formState.email) && formState.email.length > 0) {\n      errorState.email = 'Email must be valid';\n    } else {\n      errorState.email = '';\n    }\n  }\n\n  if (e.target.name === 'firstName') {\n    formState.firstName = e.target.value;\n  }\n\n  if (e.target.name === 'lastName') {\n    formState.lastName = e.target.value;\n  }\n\n  if (e.target.name === 'confirmPassword') {\n    formState.confirmPassword = e.target.value;\n\n    if (formInput.password !== formInput.confirmPassword) {\n      errorState.confirmPassword = \"Password doesn't match\";\n    } else {\n      errorState.confirmPassword = '';\n    }\n  }\n\n  return [formState, errorState];\n}\n_c = FormValidation;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormValidation\");","map":{"version":3,"sources":["/Users/hamzakhan/Desktop/twitter-clone/src/components/utils/formValidator.js"],"names":["FormValidation","e","formInput","error","formState","errorState","target","name","username","value","regexp","length","test","password","email","validRegex","firstName","lastName","confirmPassword"],"mappings":"AAAA,eAAe,SAASA,cAAT,CAAwBC,CAAxB,EAA2BC,SAA3B,EAAsCC,KAAtC,EAA6C;AAC1D,QAAMC,SAAS,GAAGF,SAAlB;AACA,QAAMG,UAAU,GAAGF,KAAnB;;AACA,MAAIF,CAAC,CAACK,MAAF,CAASC,IAAT,KAAkB,UAAtB,EAAkC;AAChCH,IAAAA,SAAS,CAACI,QAAV,GAAqBP,CAAC,CAACK,MAAF,CAASG,KAA9B;AACA,UAAMC,MAAM,GAAG,OAAf;;AACA,QAAIN,SAAS,CAACI,QAAV,CAAmBG,MAAnB,GAA4B,CAA5B,IAAiC,CAACD,MAAM,CAACE,IAAP,CAAYR,SAAS,CAACI,QAAtB,CAAtC,EAAuE;AACrEH,MAAAA,UAAU,CAACG,QAAX,GAAsB,uBAAtB;AACD,KAFD,MAEO,IAAIJ,SAAS,CAACI,QAAV,CAAmBG,MAAnB,GAA4B,CAA5B,IAAiCP,SAAS,CAACI,QAAV,CAAmBG,MAAnB,GAA4B,CAAjE,EAAoE;AACzEN,MAAAA,UAAU,CAACG,QAAX,GAAsB,8BAAtB;AACD,KAFM,MAEA;AACLH,MAAAA,UAAU,CAACG,QAAX,GAAsB,EAAtB;AACD;AACF;;AACD,MAAIP,CAAC,CAACK,MAAF,CAASC,IAAT,KAAkB,UAAtB,EAAkC;AAChCH,IAAAA,SAAS,CAACS,QAAV,GAAqBZ,CAAC,CAACK,MAAF,CAASG,KAA9B;;AACA,QAAIL,SAAS,CAACS,QAAV,CAAmBF,MAAnB,GAA4B,CAA5B,IAAiCP,SAAS,CAACS,QAAV,CAAmBF,MAAnB,GAA4B,CAAjE,EAAoE;AAClEN,MAAAA,UAAU,CAACQ,QAAX,GAAsB,kCAAtB;AACD,KAFD,MAEO;AACLR,MAAAA,UAAU,CAACQ,QAAX,GAAsB,EAAtB;AACD;AACF;;AACD,MAAIZ,CAAC,CAACK,MAAF,CAASC,IAAT,KAAkB,OAAtB,EAA+B;AAC7BH,IAAAA,SAAS,CAACU,KAAV,GAAkBb,CAAC,CAACK,MAAF,CAASG,KAA3B;AACA,UAAMM,UAAU,GAAG,sEAAnB;;AACA,QAAI,CAACA,UAAU,CAACH,IAAX,CAAgBR,SAAS,CAACU,KAA1B,CAAD,IAAqCV,SAAS,CAACU,KAAV,CAAgBH,MAAhB,GAAyB,CAAlE,EAAqE;AACnEN,MAAAA,UAAU,CAACS,KAAX,GAAmB,qBAAnB;AACD,KAFD,MAEO;AACLT,MAAAA,UAAU,CAACS,KAAX,GAAmB,EAAnB;AACD;AACF;;AACD,MAAIb,CAAC,CAACK,MAAF,CAASC,IAAT,KAAkB,WAAtB,EAAmC;AACjCH,IAAAA,SAAS,CAACY,SAAV,GAAsBf,CAAC,CAACK,MAAF,CAASG,KAA/B;AACD;;AACD,MAAIR,CAAC,CAACK,MAAF,CAASC,IAAT,KAAkB,UAAtB,EAAkC;AAChCH,IAAAA,SAAS,CAACa,QAAV,GAAqBhB,CAAC,CAACK,MAAF,CAASG,KAA9B;AACD;;AACD,MAAIR,CAAC,CAACK,MAAF,CAASC,IAAT,KAAkB,iBAAtB,EAAyC;AACvCH,IAAAA,SAAS,CAACc,eAAV,GAA4BjB,CAAC,CAACK,MAAF,CAASG,KAArC;;AACA,QAAIP,SAAS,CAACW,QAAV,KAAuBX,SAAS,CAACgB,eAArC,EAAsD;AACpDb,MAAAA,UAAU,CAACa,eAAX,GAA6B,wBAA7B;AACD,KAFD,MAEO;AACLb,MAAAA,UAAU,CAACa,eAAX,GAA6B,EAA7B;AACD;AACF;;AACD,SAAO,CAACd,SAAD,EAAYC,UAAZ,CAAP;AACD;KA9CuBL,c","sourcesContent":["export default function FormValidation(e, formInput, error) {\n  const formState = formInput;\n  const errorState = error;\n  if (e.target.name === 'username') {\n    formState.username = e.target.value;\n    const regexp = /^\\S*$/;\n    if (formState.username.length > 0 && !regexp.test(formState.username)) {\n      errorState.username = 'No whitespace allowed';\n    } else if (formState.username.length > 0 && formState.username.length < 5) {\n      errorState.username = 'Username must be 5 character';\n    } else {\n      errorState.username = '';\n    }\n  }\n  if (e.target.name === 'password') {\n    formState.password = e.target.value;\n    if (formState.password.length < 8 && formState.password.length > 0) {\n      errorState.password = 'Password must be of 8 characters';\n    } else {\n      errorState.password = '';\n    }\n  }\n  if (e.target.name === 'email') {\n    formState.email = e.target.value;\n    const validRegex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\n    if (!validRegex.test(formState.email) && formState.email.length > 0) {\n      errorState.email = 'Email must be valid';\n    } else {\n      errorState.email = '';\n    }\n  }\n  if (e.target.name === 'firstName') {\n    formState.firstName = e.target.value;\n  }\n  if (e.target.name === 'lastName') {\n    formState.lastName = e.target.value;\n  }\n  if (e.target.name === 'confirmPassword') {\n    formState.confirmPassword = e.target.value;\n    if (formInput.password !== formInput.confirmPassword) {\n      errorState.confirmPassword = \"Password doesn't match\";\n    } else {\n      errorState.confirmPassword = '';\n    }\n  }\n  return [formState, errorState];\n}\n"]},"metadata":{},"sourceType":"module"}